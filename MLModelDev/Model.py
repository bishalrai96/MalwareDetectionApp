from sklearn.tree import DecisionTreeClassifier
import pandas as pd
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix  
from sklearn.model_selection import RepeatedKFold
import pickle 
from sklearn.tree import export_graphviz
from sklearn.externals.six import StringIO  
from IPython.display import Image  
import pydotplus 

numberOfColumn = 67

balance_data = pd.read_csv(r"..\MalwareSamples\data.csv", sep = ',')
X = balance_data.values[:, 1:numberOfColumn]
Y = balance_data.values[:, 0]


permissions = []
with open(r"..\MLModelDev\permissionList.txt", "r") as file:
		for lines in file:
			lines = lines[:-1]
			permissions.append(lines);


kf = RepeatedKFold(n_splits = 5, random_state = None)

model = DecisionTreeClassifier()

false_negative_list = []

false_positive  = 0
false_negative  = 0
true_positive   = 0
true_negative   = 0
accuracy_score_ = 0

for train_index, test_index in kf.split(X):

	
	X_train, X_test = X[train_index], X[test_index]
	Y_train, Y_test = Y[train_index], Y[test_index]

	model.fit(X_train, Y_train)
	pred = model.predict(X_test)
	
	accuracy_score_ = accuracy_score_ + accuracy_score(pred, Y_test)

	CM = confusion_matrix(Y_test, pred)
	
	false_negative = false_negative + CM[1][0]
	false_positive = false_positive + CM[0][1]
	true_negative  = true_negative  + CM[0][0]
	true_positive  = true_positive  + CM[1][1]



print ("avg FP")
print (idx)
print (false_negative / idx)
print ("avg FN")
print (false_positive / idx)
print ("avg TN")
print (true_negative  / idx)
print  ("avg TP")
print (true_positive  / idx)
print ("accuracy score")
print (accuracy_score_/ idx)

